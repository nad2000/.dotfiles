set-window-option -g mode-keys vi
# remap prefix to Control + a
set -g prefix C-a
# bind 'C-a C-a' to type 'C-a'
bind C-a send-prefix
unbind C-b

# Start window numbering at 1
set -g base-index 1

setw -g mode-keys vi
set -g history-limit 20000

# use UTF8
set -g utf8
set-window-option -g utf8 on

#source $HOME/.local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf
#set -g default-terminal "tmux-256color"
set -g default-terminal "screen-256color"
set -s escape-time 0

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l


# We want to turn on aggressive-resize so that it only constrains the size of the tmux client to the size of the smaller client if both clients are looking at the same window. This setting isn't necessary for this to work, but I would still recommend it.
setw -g aggressive-resize on

# Allow to use ^ARROW (alternatively use set-option -g default-terminal "xterm-256color")
set-window-option -g xterm-keys on

# Allow scrolling
set -g mouse on

# paging through the windows
bind -n C-PageUp previous-window
bind -n C-PageDown next-window

# Tmux Vim-binding for copying into tmux buffer
bind P paste-buffer
# bind-key -T copy-mode-vi 'v' send-keys begin-selection
# bind-key -T copy-mode-vi 'y' send-keys copy-selection
# bind-key -T copy-mode-vi 'r' send-keys rectangle-toggle

bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection
bind -t vi-copy 'r' rectangle-toggle

# Active tab:
set-window-option -g window-status-current-bg blue

# Current branch:
set -g status-right '#[bg=colour40]#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
