set-window-option -g mode-keys vi  # setw -g mode-keys vi
# Prevent Applications Like Vim and Less Clearing Screen on Exit (http://chenyufei.info/blog/2011-12-15/prevent-vim-less-clear-screen-on-exit/)
set-window-option -g alternate-screen off
# remap prefix to Control + a
set -g prefix C-a
# bind 'C-a C-a' to type 'C-a'
bind C-a send-prefix
unbind C-b

# Start window numbering at 1
set -g base-index 1

# open new windows and panes in the CWD
bind c new-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"

set -g history-limit 20000

# use UTF
## set -g utf8
## set-window-option -g utf8 on

#source $HOME/.local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf
set -g default-terminal "xterm-256color"
# set -g default-terminal "tmux-256color"
# set -g default-terminal "screen-256color"
set -as terminal-overrides ",st-256color:Tc"
set -as terminal-overrides ",tmux-256color:Tc"
set -as terminal-overrides ",*256col*:Tc"
set -s escape-time 0

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# And: https://github.com/keith/evil-tmux-navigator
is_editor="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?|emacs.*$'"
bind-key -n C-h if-shell "$is_editor" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_editor" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_editor" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_editor" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_editor" "send-keys C-\\" "select-pane -l"
bind-key -n C-space resize-pane -t 0 -y 20% \; resize-pane -t 1 -y 60%

# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-l) || tmux select-pane -R"

bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# We want to turn on aggressive-resize so that it only constrains the size of
# the tmux client to the size of the smaller client if both clients are looking
# at the same window. This setting isn't necessary for this to work, but I
# would still recommend it.
setw -g aggressive-resize on

# Allow to use ^ARROW (alternatively use set-option -g default-terminal
# "xterm-256color")
set-window-option -g xterm-keys on

# Allow scrolling
set -g mouse on

# paging through the windows
bind -n C-PageUp previous-window
bind -n C-PageDown next-window

# Tmux Vim-binding for copying into tmux buffer
bind P paste-buffer
unbind-key -T copy-mode-vi 'v'
unbind-key -T copy-mode-vi 'y'
unbind-key -T copy-mode-vi 'C-v'
# unbind-key -T copy-mode-vi 'R'
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
# bind-key -T copy-mode-vi 'y' send-keys -X copy-selection
# bind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel
# comment the preceding line and uncomment the following to yank to X clipboard
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
# bind-key -T copy-mode-vi 'r' send-keys rectangle-toggle
# bind-key -T copy-mode-vi 'C-v' send-keys rectangle-toggle
bind-key -T copy-mode-vi 'C-v' send-keys -X begin-selection \; send-keys -X rectangle-toggle
# bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle \; send -X begin-selection
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xsel -i --clipboard"
bind-key -T copy-mode Enter send-keys -X copy-pipe-and-cancel "xsel -i --clipboard"

# bind -t vi-copy 'v' begin-selection
# bind -t vi-copy 'y' copy-selection
# bind -t vi-copy 'r' rectangle-toggle

# Toggle status line:
bind-key -n M-s set-option -g status

set -g status-bg colour70
# Active tab:
set -g window-status-current-style 'bg=colour26,fg=white'

# Current branch:
set -g status-right '#[bg=colour40]#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
# set -g status-left '#[fg=yellow]#{pane_current_command} #(zsh -c "echo $ZSH_VI_MODE_KEYMAP")'

#
#set inactive/active window styles
#set -g window-style 'fg=#808080,bg=#262626'
set -g window-style 'fg=#a0a0a0,bg=#3a3a3a'
set -g window-active-style 'fg=white,bg=#3a3a3a'

# set the pane border colors
set -g pane-border-style 'fg=colour235,bg=colour238'
set -g pane-active-border-style 'fg=colour236,bg=colour250'
